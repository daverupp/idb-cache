{"version":3,"file":"idb-cache.js","sources":["../tsc/utils/canUseBlob.js","../tsc/idb-cache.js"],"sourcesContent":["export default function canUseBlob() {\n    const ua = navigator.userAgent;\n    const isIOS = /iP(hone|(o|a)d)/.test(ua);\n    if (isIOS) {\n        const iosVerRegexResult = /ip[honead]{2,4}(?:.*os\\s(\\w+)\\slike\\smac)/i.exec(ua);\n        if (iosVerRegexResult) {\n            const iosVer = iosVerRegexResult[1];\n            const [major = '', minor = '', patch = ''] = iosVer.split('_');\n            const iosVerStr = ('000' + major).slice(-3)\n                + ('000' + minor).slice(-3)\n                + ('000' + patch).slice(-3);\n            // Less than iOS12.2 can not use blob\n            if (iosVerStr < '012002000') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n","/**\n * @author Drecom Co.,Ltd. http://www.drecom.co.jp/\n */\nimport canUseBlob from './utils/canUseBlob';\nconst VERSION = 1;\nconst STORE_NAME = {\n    META: 'metastore',\n    DATA: 'datastore',\n};\nconst DATA_TYPE = {\n    STRING: 1,\n    ARRAYBUFFER: 2,\n    BLOB: 3,\n};\nconst useBlob = canUseBlob();\nexport default class IDBCache {\n    constructor(dbName, strageLimit) {\n        this._maxSize = 52428800; // 50MB\n        this._maxCount = 100; // 100files\n        this._defaultAge = 86400; // 1day\n        this._nowSize = 0;\n        this._metaCache = new Map();\n        this._indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB;\n        this._dbName = dbName;\n        if (!this._indexedDB) {\n            console.error('IndexedDB is not supported');\n            return;\n        }\n        if (strageLimit) {\n            if (strageLimit.size)\n                this._maxSize = strageLimit.size;\n            if (strageLimit.count)\n                this._maxCount = strageLimit.count;\n            if (strageLimit.defaultAge)\n                this._defaultAge = strageLimit.defaultAge;\n        }\n        this._initialize();\n    }\n    /**\n     * Save key-value in IndexedDB.\n     * Overwrite if the key already exists.\n     * @param key\n     * @param value\n     * @param maxAge Number of seconds to keep\n     */\n    set(key, value, maxAge = this._defaultAge) {\n        return new Promise((resolve, reject) => {\n            this._serializeData(value, (data, meta) => {\n                if (meta.size === 0) {\n                    reject(IDBCache.ERROR.INVALID_ARGUMENT);\n                    return;\n                }\n                this._open((db) => {\n                    const transaction = db.transaction([STORE_NAME.META, STORE_NAME.DATA], 'readwrite');\n                    const metaStore = transaction.objectStore(STORE_NAME.META);\n                    const dataStore = transaction.objectStore(STORE_NAME.DATA);\n                    const nowSeconds = Math.floor(Date.now() / 1000);\n                    meta.expire = nowSeconds + maxAge;\n                    transaction.oncomplete = () => {\n                        transaction.oncomplete = null;\n                        transaction.onerror = null;\n                        transaction.onabort = null;\n                        const cacheMeta = this._metaCache.get(key);\n                        if (cacheMeta) {\n                            this._metaCache.delete(key);\n                            this._nowSize -= cacheMeta.size;\n                        }\n                        this._metaCache.set(key, meta);\n                        this._nowSize += meta.size;\n                        if (this._maxCount < this._metaCache.size || this._maxSize < this._nowSize) {\n                            this._cleanup();\n                        }\n                        resolve();\n                    };\n                    transaction.onerror = () => {\n                        transaction.oncomplete = null;\n                        transaction.onerror = null;\n                        transaction.onabort = null;\n                        reject(IDBCache.ERROR.REQUEST_FAILED);\n                    };\n                    transaction.onabort = () => {\n                        transaction.oncomplete = null;\n                        transaction.onerror = null;\n                        transaction.onabort = null;\n                        reject(IDBCache.ERROR.REQUEST_FAILED);\n                    };\n                    try {\n                        dataStore.put(data, key);\n                        metaStore.put(meta, key);\n                    }\n                    catch (e) {\n                        console.error(e);\n                        transaction.abort();\n                    }\n                }, (errorCode) => {\n                    // Open error\n                    reject(errorCode);\n                });\n            });\n        });\n    }\n    /**\n     * Get value from IndexedDB\n     * @param key\n     */\n    get(key) {\n        return new Promise((resolve, reject) => {\n            this._open((db) => {\n                const transaction = db.transaction(STORE_NAME.DATA, 'readonly');\n                const dataStore = transaction.objectStore(STORE_NAME.DATA);\n                const request = dataStore.get(key);\n                request.onsuccess = () => {\n                    request.onsuccess = null;\n                    request.onerror = null;\n                    const nowSeconds = Math.floor(Date.now() / 1000);\n                    const cacheMeta = this._metaCache.get(key);\n                    if (request.result && cacheMeta && nowSeconds < cacheMeta.expire) {\n                        this._deserializeData(request.result, cacheMeta, (data) => {\n                            resolve(data);\n                        });\n                    }\n                    else {\n                        // Can not find or expired\n                        reject(IDBCache.ERROR.GET_EMPTY);\n                    }\n                };\n                request.onerror = () => {\n                    request.onsuccess = null;\n                    request.onerror = null;\n                    reject(IDBCache.ERROR.REQUEST_FAILED);\n                };\n            }, (errorCode) => {\n                // Open error\n                reject(errorCode);\n            });\n        });\n    }\n    /**\n     * Delete one value of IndexedDB\n     * @param key\n     */\n    delete(key) {\n        return new Promise((resolve, reject) => {\n            this._open((db) => {\n                const transaction = db.transaction([STORE_NAME.META, STORE_NAME.DATA], 'readwrite');\n                const metaStore = transaction.objectStore(STORE_NAME.META);\n                const dataStore = transaction.objectStore(STORE_NAME.DATA);\n                transaction.oncomplete = () => {\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    const cacheMeta = this._metaCache.get(key);\n                    if (cacheMeta) {\n                        this._metaCache.delete(key);\n                        this._nowSize -= cacheMeta.size;\n                    }\n                    resolve();\n                };\n                transaction.onerror = () => {\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    reject(IDBCache.ERROR.REQUEST_FAILED);\n                };\n                transaction.onabort = () => {\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    reject(IDBCache.ERROR.REQUEST_FAILED);\n                };\n                try {\n                    dataStore.delete(key);\n                    metaStore.delete(key);\n                }\n                catch (e) {\n                    console.error(e);\n                    transaction.abort();\n                }\n            }, (errorCode) => {\n                // Open error\n                reject(errorCode);\n            });\n        });\n    }\n    _initialize() {\n        this._open((db) => {\n            const transaction = db.transaction(STORE_NAME.META, 'readonly');\n            const metaStore = transaction.objectStore(STORE_NAME.META);\n            this._metaCache.clear();\n            this._nowSize = 0;\n            let canGetAll = false;\n            if (metaStore.getAllKeys && metaStore.getAll) {\n                canGetAll = true;\n            }\n            else {\n                console.warn('This device does not support getAll');\n            }\n            let allKeys;\n            let allValues;\n            transaction.oncomplete = () => {\n                transaction.oncomplete = null;\n                transaction.onerror = null;\n                if (canGetAll) {\n                    for (var i = 0; i < allKeys.length; i++) {\n                        const key = allKeys[i];\n                        const val = allValues[i];\n                        this._metaCache.set(key, val);\n                        this._nowSize += val.size;\n                    }\n                }\n                // Sort in ascending order of expire\n                const sortArray = [];\n                const itelator = this._metaCache.entries();\n                let iteratorResult = itelator.next();\n                while (!iteratorResult.done) {\n                    sortArray.push(iteratorResult.value);\n                    iteratorResult = itelator.next();\n                }\n                sortArray.sort(function (a, b) {\n                    if (a[1].expire < b[1].expire)\n                        return -1;\n                    if (a[1].expire > b[1].expire)\n                        return 1;\n                    return 0;\n                });\n                this._metaCache = new Map(sortArray);\n                this._cleanup();\n            };\n            transaction.onerror = () => {\n                transaction.oncomplete = null;\n                transaction.onerror = null;\n            };\n            // referencing argument's event.target of openCursor() causes memory leak on Safari\n            if (canGetAll) {\n                metaStore.getAllKeys().onsuccess = (event) => {\n                    allKeys = event.target.result;\n                };\n                metaStore.getAll().onsuccess = (event) => {\n                    allValues = event.target.result;\n                };\n            }\n            else {\n                metaStore.openCursor().onsuccess = (event) => {\n                    const cursor = event.target.result;\n                    if (cursor) {\n                        this._metaCache.set(cursor.key, cursor.value);\n                        this._nowSize += cursor.value.size;\n                        cursor.continue();\n                    }\n                    ;\n                };\n            }\n            ;\n        }, () => {\n            // Ignore open error\n        });\n    }\n    _cleanup() {\n        this._open((db) => {\n            const removeKeys = new Set();\n            const nowSeconds = Math.floor(Date.now() / 1000);\n            let tmpNowCount = this._metaCache.size;\n            this._metaCache.forEach((meta, key) => {\n                if (meta.expire < nowSeconds || this._maxSize < this._nowSize || this._maxCount < tmpNowCount) {\n                    removeKeys.add(key);\n                    this._nowSize -= meta.size;\n                    tmpNowCount--;\n                }\n            });\n            if (0 < removeKeys.size) {\n                const transaction = db.transaction([STORE_NAME.META, STORE_NAME.DATA], 'readwrite');\n                const metaStore = transaction.objectStore(STORE_NAME.META);\n                const dataStore = transaction.objectStore(STORE_NAME.DATA);\n                transaction.oncomplete = () => {\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    removeKeys.forEach((key) => {\n                        if (this._metaCache.has(key))\n                            this._metaCache.delete(key);\n                    });\n                };\n                transaction.onerror = () => {\n                    console.error('IndexedDB cleanup failed');\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    this._nowSize = 0;\n                    this._metaCache.forEach((meta) => {\n                        this._nowSize += meta.size;\n                    });\n                };\n                transaction.onabort = () => {\n                    console.error('IndexedDB cleanup failed');\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    this._nowSize = 0;\n                    this._metaCache.forEach((meta) => {\n                        this._nowSize += meta.size;\n                    });\n                };\n                removeKeys.forEach((key) => {\n                    try {\n                        dataStore.delete(key);\n                        metaStore.delete(key);\n                    }\n                    catch (e) {\n                        transaction.abort();\n                    }\n                });\n            }\n        }, () => {\n            // Ignore open error\n        });\n    }\n    _createObjectStore(db, oldVersion) {\n        if (oldVersion < 1) {\n            // Structure of first edition\n            db.createObjectStore(STORE_NAME.META);\n            db.createObjectStore(STORE_NAME.DATA);\n        }\n    }\n    _open(success, error) {\n        if (!this._indexedDB) {\n            error(IDBCache.ERROR.NOT_SUPPORT_IDB);\n            return;\n        }\n        let request = this._indexedDB.open(this._dbName, VERSION);\n        request.onupgradeneeded = (event) => {\n            request.onupgradeneeded = null;\n            this._createObjectStore(request.result, event.oldVersion);\n        };\n        request.onblocked = () => {\n            request.onblocked = null;\n            alert('Please close other tabs');\n        };\n        request.onsuccess = () => {\n            request.onupgradeneeded = null;\n            request.onblocked = null;\n            request.onsuccess = null;\n            request.onerror = null;\n            try {\n                success(request.result);\n            }\n            catch (e) {\n                console.error(e);\n                error(IDBCache.ERROR.UNKNOWN);\n            }\n        };\n        request.onerror = () => {\n            console.error('IndexedDB open failed');\n            request.onupgradeneeded = null;\n            request.onblocked = null;\n            request.onsuccess = null;\n            request.onerror = null;\n            error(IDBCache.ERROR.CANNOT_OPEN);\n        };\n    }\n    _serializeData(data, cb) {\n        const meta = {\n            type: 0,\n            size: 0,\n        };\n        if (typeof data === 'string') {\n            meta.type = DATA_TYPE.STRING;\n            meta.size = data.length;\n        }\n        else if (data instanceof ArrayBuffer) {\n            meta.type = DATA_TYPE.ARRAYBUFFER;\n            meta.size = data.byteLength;\n        }\n        else if (data instanceof Blob) {\n            meta.type = DATA_TYPE.BLOB;\n            meta.size = data.size;\n        }\n        else {\n            console.warn('Is not supported type of value');\n        }\n        if (!useBlob && meta.type === DATA_TYPE.BLOB) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                reader.onload = null;\n                meta.size = reader.result.byteLength;\n                meta.mime = data.type;\n                cb(reader.result, meta);\n            };\n            reader.onerror = () => {\n                reader.onerror = null;\n                meta.size = 0;\n                cb(null, meta);\n            };\n            reader.readAsArrayBuffer(data);\n        }\n        else {\n            cb(data, meta);\n        }\n    }\n    _deserializeData(data, meta, cb) {\n        let type = 0;\n        if (typeof data === 'string') {\n            type = DATA_TYPE.STRING;\n        }\n        else if (data instanceof ArrayBuffer) {\n            type = DATA_TYPE.ARRAYBUFFER;\n        }\n        else if (data instanceof Blob) {\n            type = DATA_TYPE.BLOB;\n        }\n        if (meta && meta.type === DATA_TYPE.BLOB && type === DATA_TYPE.ARRAYBUFFER) {\n            const blob = new Blob([data], { type: meta.mime });\n            cb(blob);\n        }\n        else {\n            cb(data);\n        }\n    }\n}\nIDBCache.ERROR = {\n    INVALID_ARGUMENT: 1,\n    CANNOT_OPEN: 2,\n    REQUEST_FAILED: 3,\n    GET_EMPTY: 4,\n    NOT_SUPPORT_IDB: 5,\n    UNKNOWN: 6,\n};\n"],"names":["canUseBlob","ua","navigator","userAgent","isIOS","test","iosVerRegexResult","exec","iosVer","split","major","minor","patch","iosVerStr","slice","VERSION","STORE_NAME","META","DATA","DATA_TYPE","STRING","ARRAYBUFFER","BLOB","useBlob","IDBCache","dbName","strageLimit","_maxSize","_maxCount","_defaultAge","_nowSize","_metaCache","Map","_indexedDB","window","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","_dbName","console","error","size","count","defaultAge","_initialize","key","value","maxAge","Promise","resolve","reject","_serializeData","data","meta","ERROR","INVALID_ARGUMENT","_open","db","transaction","metaStore","objectStore","dataStore","nowSeconds","Math","floor","Date","now","expire","oncomplete","onerror","onabort","cacheMeta","get","delete","set","_cleanup","REQUEST_FAILED","put","e","abort","errorCode","request","onsuccess","result","_deserializeData","GET_EMPTY","clear","canGetAll","getAllKeys","getAll","warn","allKeys","allValues","i","length","val","sortArray","itelator","entries","iteratorResult","next","done","push","sort","a","b","event","target","openCursor","cursor","continue","removeKeys","Set","tmpNowCount","forEach","add","has","oldVersion","createObjectStore","success","NOT_SUPPORT_IDB","open","onupgradeneeded","_createObjectStore","onblocked","alert","UNKNOWN","CANNOT_OPEN","cb","type","ArrayBuffer","byteLength","Blob","reader","FileReader","onload","mime","readAsArrayBuffer","blob"],"mappings":"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"}
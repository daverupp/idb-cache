{"version":3,"file":"idb-cache.js","sources":["idb-cache.js"],"sourcesContent":["/**\n * @author Drecom Co.,Ltd. http://www.drecom.co.jp/\n */\nconst VERSION = 1;\nconst STORE_NAME = {\n    META: 'metastore',\n    DATA: 'datastore',\n};\nconst DATA_TYPE = {\n    STRING: 1,\n    ARRAYBUFFER: 2,\n    BLOB: 3,\n};\n// iPhone/iPod/iPad\nconst isIOS = /iP(hone|(o|a)d);/.test(navigator.userAgent);\nexport default class IDBCache {\n    constructor(dbName, strageLimit) {\n        this._maxSize = 52428800; // 50MB\n        this._maxCount = 100; // 100files\n        this._defaultAge = 86400; // 1day\n        this._nowSize = 0;\n        this._metaCache = new Map();\n        this._indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB;\n        this._dbName = dbName;\n        if (!this._indexedDB) {\n            console.error('IndexedDB is not supported');\n            return;\n        }\n        if (strageLimit) {\n            if (strageLimit.size)\n                this._maxSize = strageLimit.size;\n            if (strageLimit.count)\n                this._maxCount = strageLimit.count;\n            if (strageLimit.defaultAge)\n                this._defaultAge = strageLimit.defaultAge;\n        }\n        this._initialize();\n    }\n    /**\n     * Save key-value in IndexedDB.\n     * Overwrite if the key already exists.\n     * @param key\n     * @param value\n     * @param maxAge Number of seconds to keep\n     */\n    set(key, value, maxAge = this._defaultAge) {\n        return new Promise((resolve, reject) => {\n            this._serializeData(value, (data, meta) => {\n                if (meta.size === 0) {\n                    reject();\n                    return;\n                }\n                this._open((db) => {\n                    const transaction = db.transaction([STORE_NAME.META, STORE_NAME.DATA], 'readwrite');\n                    const metaStore = transaction.objectStore(STORE_NAME.META);\n                    const dataStore = transaction.objectStore(STORE_NAME.DATA);\n                    const nowSeconds = Math.floor(Date.now() / 1000);\n                    meta.expire = nowSeconds + maxAge;\n                    transaction.oncomplete = () => {\n                        transaction.oncomplete = null;\n                        transaction.onerror = null;\n                        transaction.onabort = null;\n                        const cacheMeta = this._metaCache.get(key);\n                        if (cacheMeta) {\n                            this._nowSize -= cacheMeta.size;\n                            this._metaCache.delete(key);\n                        }\n                        this._nowSize += meta.size;\n                        this._metaCache.set(key, meta);\n                        if (this._maxCount < this._metaCache.size || this._maxSize < this._nowSize) {\n                            this._cleanup();\n                        }\n                        resolve();\n                    };\n                    transaction.onerror = () => {\n                        transaction.oncomplete = null;\n                        transaction.onerror = null;\n                        transaction.onabort = null;\n                        reject();\n                    };\n                    transaction.onabort = () => {\n                        transaction.oncomplete = null;\n                        transaction.onerror = null;\n                        transaction.onabort = null;\n                        reject();\n                    };\n                    try {\n                        dataStore.put(data, key);\n                        metaStore.put(meta, key);\n                    }\n                    catch (e) {\n                        console.error(e);\n                        transaction.abort();\n                    }\n                }, () => {\n                    // Open error\n                    reject();\n                });\n            });\n        });\n    }\n    /**\n     * Get value from IndexedDB\n     * @param key\n     */\n    get(key) {\n        return new Promise((resolve, reject) => {\n            this._open((db) => {\n                const transaction = db.transaction(STORE_NAME.DATA, 'readonly');\n                const dataStore = transaction.objectStore(STORE_NAME.DATA);\n                const request = dataStore.get(key);\n                request.onsuccess = () => {\n                    request.onsuccess = null;\n                    request.onerror = null;\n                    const nowSeconds = Math.floor(Date.now() / 1000);\n                    const cacheMeta = this._metaCache.get(key);\n                    if (request.result && cacheMeta && nowSeconds < cacheMeta.expire) {\n                        this._deserializeData(request.result, cacheMeta, (data) => {\n                            resolve(data);\n                        });\n                    }\n                    else {\n                        reject();\n                    }\n                };\n                request.onerror = () => {\n                    request.onsuccess = null;\n                    request.onerror = null;\n                    reject();\n                };\n            }, () => {\n                // Open error\n                reject();\n            });\n        });\n    }\n    /**\n     * Delete one value of IndexedDB\n     * @param key\n     */\n    delete(key) {\n        return new Promise((resolve, reject) => {\n            this._open((db) => {\n                const transaction = db.transaction([STORE_NAME.META, STORE_NAME.DATA], 'readwrite');\n                const metaStore = transaction.objectStore(STORE_NAME.META);\n                const dataStore = transaction.objectStore(STORE_NAME.DATA);\n                transaction.oncomplete = () => {\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    if (this._metaCache.has(key)) {\n                        this._metaCache.delete(key);\n                    }\n                    resolve();\n                };\n                transaction.onerror = () => {\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    reject();\n                };\n                transaction.onabort = () => {\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    reject();\n                };\n                try {\n                    dataStore.delete(key);\n                    metaStore.delete(key);\n                }\n                catch (e) {\n                    console.error(e);\n                    transaction.abort();\n                }\n            }, () => {\n                // Open error\n                reject();\n            });\n        });\n    }\n    _initialize() {\n        this._open((db) => {\n            const transaction = db.transaction(STORE_NAME.META, 'readonly');\n            const metaStore = transaction.objectStore(STORE_NAME.META);\n            this._metaCache.clear();\n            this._nowSize = 0;\n            transaction.oncomplete = () => {\n                transaction.oncomplete = null;\n                transaction.onerror = null;\n                // Sort in ascending order of expire\n                this._metaCache = new Map([...this._metaCache.entries()].sort(function (a, b) {\n                    if (a[1].expire < b[1].expire)\n                        return -1;\n                    if (a[1].expire > b[1].expire)\n                        return 1;\n                    return 0;\n                }));\n                this._cleanup();\n            };\n            transaction.onerror = () => {\n                transaction.oncomplete = null;\n                transaction.onerror = null;\n            };\n            metaStore.openCursor().onsuccess = (event) => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    this._metaCache.set(cursor.key, cursor.value);\n                    this._nowSize += cursor.value.size;\n                    cursor.continue();\n                }\n                ;\n            };\n        }, () => {\n            // Ignore open error\n        });\n    }\n    _cleanup() {\n        this._open((db) => {\n            const removeKeys = new Set();\n            const nowSeconds = Math.floor(Date.now() / 1000);\n            let tmpNowSize = this._nowSize;\n            let tmpNowCount = this._metaCache.size;\n            this._metaCache.forEach((meta, key) => {\n                if (meta.expire < nowSeconds || this._maxSize < tmpNowSize || this._maxCount < tmpNowCount) {\n                    removeKeys.add(key);\n                    tmpNowSize -= meta.size;\n                    tmpNowCount--;\n                }\n            });\n            if (0 < removeKeys.size) {\n                const transaction = db.transaction([STORE_NAME.META, STORE_NAME.DATA], 'readwrite');\n                const metaStore = transaction.objectStore(STORE_NAME.META);\n                const dataStore = transaction.objectStore(STORE_NAME.DATA);\n                transaction.oncomplete = () => {\n                    transaction.oncomplete = null;\n                    removeKeys.forEach((key) => {\n                        if (this._metaCache.has(key))\n                            this._metaCache.delete(key);\n                    });\n                };\n                // Do not catch abort and error\n                removeKeys.forEach((key) => {\n                    try {\n                        dataStore.delete(key);\n                        metaStore.delete(key);\n                    }\n                    catch (e) {\n                        transaction.abort();\n                    }\n                });\n            }\n        }, () => {\n            // Ignore open error\n        });\n    }\n    _createObjectStore(db, oldVersion) {\n        if (oldVersion < 1) {\n            // Structure of first edition\n            db.createObjectStore(STORE_NAME.META);\n            db.createObjectStore(STORE_NAME.DATA);\n        }\n    }\n    _open(success, error) {\n        if (!this._indexedDB) {\n            error();\n            return;\n        }\n        let request = this._indexedDB.open(this._dbName, VERSION);\n        request.onupgradeneeded = (event) => {\n            request.onupgradeneeded = null;\n            this._createObjectStore(request.result, event.oldVersion);\n        };\n        request.onblocked = () => {\n            request.onblocked = null;\n            alert('Please close other tabs');\n        };\n        request.onsuccess = () => {\n            request.onupgradeneeded = null;\n            request.onblocked = null;\n            request.onsuccess = null;\n            request.onerror = null;\n            success(request.result);\n        };\n        request.onerror = () => {\n            console.error('IndexedDB open failed');\n            request.onupgradeneeded = null;\n            request.onblocked = null;\n            request.onsuccess = null;\n            request.onerror = null;\n            error();\n        };\n    }\n    _serializeData(data, cb) {\n        const meta = {\n            type: 0,\n            size: 0,\n        };\n        if (typeof data === 'string') {\n            meta.type = DATA_TYPE.STRING;\n            meta.size = data.length;\n        }\n        else if (data instanceof ArrayBuffer) {\n            meta.type = DATA_TYPE.ARRAYBUFFER;\n            meta.size = data.byteLength;\n        }\n        else if (data instanceof Blob) {\n            meta.type = DATA_TYPE.BLOB;\n            meta.size = data.size;\n        }\n        else {\n            console.warn('Is not supported type of value');\n        }\n        // IndexedDB on iOS does not support blob\n        if (isIOS && meta.type === DATA_TYPE.BLOB) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                reader.onload = null;\n                meta.size = reader.result.byteLength;\n                meta.mime = data.type;\n                cb(reader.result, meta);\n            };\n            reader.onerror = () => {\n                reader.onerror = null;\n                meta.size = 0;\n                cb(null, meta);\n            };\n            reader.readAsArrayBuffer(data);\n        }\n        else {\n            cb(data, meta);\n        }\n    }\n    _deserializeData(data, meta, cb) {\n        let type = 0;\n        if (typeof data === 'string') {\n            type = DATA_TYPE.STRING;\n        }\n        else if (data instanceof ArrayBuffer) {\n            type = DATA_TYPE.ARRAYBUFFER;\n        }\n        else if (data instanceof Blob) {\n            type = DATA_TYPE.BLOB;\n        }\n        if (meta && meta.type === DATA_TYPE.BLOB && type === DATA_TYPE.ARRAYBUFFER) {\n            const blob = new Blob([data], { type: meta.mime });\n            cb(blob);\n        }\n        else {\n            cb(data);\n        }\n    }\n}\n"],"names":["VERSION","STORE_NAME","META","DATA","DATA_TYPE","STRING","ARRAYBUFFER","BLOB","isIOS","test","navigator","userAgent","IDBCache","dbName","strageLimit","_maxSize","_maxCount","_defaultAge","_nowSize","_metaCache","Map","_indexedDB","window","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","_dbName","console","error","size","count","defaultAge","_initialize","key","value","maxAge","Promise","resolve","reject","_serializeData","data","meta","_open","db","transaction","metaStore","objectStore","dataStore","nowSeconds","Math","floor","Date","now","expire","oncomplete","onerror","onabort","cacheMeta","get","delete","set","_cleanup","put","e","abort","request","onsuccess","result","_deserializeData","has","clear","entries","sort","a","b","openCursor","event","cursor","target","continue","removeKeys","Set","tmpNowSize","tmpNowCount","forEach","add","oldVersion","createObjectStore","success","open","onupgradeneeded","_createObjectStore","onblocked","alert","cb","type","length","ArrayBuffer","byteLength","Blob","warn","reader","FileReader","onload","mime","readAsArrayBuffer","blob"],"mappings":"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"}
{"version":3,"file":"idb-cache.js","sources":["idb-cache.js"],"sourcesContent":["/**\n * @author Drecom Co.,Ltd. http://www.drecom.co.jp/\n */\nconst VERSION = 1;\nconst STORE_NAME = {\n    META: 'metastore',\n    DATA: 'datastore',\n};\nconst DATA_TYPE = {\n    STRING: 1,\n    ARRAYBUFFER: 2,\n    BLOB: 3,\n};\n// iPhone/iPod/iPad\nconst isIOS = /iP(hone|(o|a)d);/.test(window.navigator.userAgent);\nexport default class IDBCache {\n    constructor(dbName, strageLimit) {\n        this._maxSize = 52428800; // 50MB\n        this._maxCount = 100; // 100files\n        this._defaultAge = 86400; // 1day\n        this._nowSize = 0;\n        this._metaCache = new Map();\n        this._indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB;\n        this._dbName = dbName;\n        if (!this._indexedDB) {\n            console.error('IndexedDB is not supported');\n            return;\n        }\n        if (strageLimit) {\n            if (strageLimit.size)\n                this._maxSize = strageLimit.size;\n            if (strageLimit.count)\n                this._maxCount = strageLimit.count;\n            if (strageLimit.defaultAge)\n                this._defaultAge = strageLimit.defaultAge;\n        }\n        this._initialize();\n    }\n    /**\n     * Save key-value in IndexedDB.\n     * Overwrite if the key already exists.\n     * @param key\n     * @param value\n     * @param maxAge Number of seconds to keep\n     */\n    set(key, value, maxAge = this._defaultAge) {\n        return new Promise((resolve, reject) => {\n            this._serializeData(value, (data, meta) => {\n                if (meta.size === 0) {\n                    reject(IDBCache.ERROR.INVALID_ARGUMENT);\n                    return;\n                }\n                this._open((db) => {\n                    const transaction = db.transaction([STORE_NAME.META, STORE_NAME.DATA], 'readwrite');\n                    const metaStore = transaction.objectStore(STORE_NAME.META);\n                    const dataStore = transaction.objectStore(STORE_NAME.DATA);\n                    const nowSeconds = Math.floor(Date.now() / 1000);\n                    meta.expire = nowSeconds + maxAge;\n                    transaction.oncomplete = () => {\n                        transaction.oncomplete = null;\n                        transaction.onerror = null;\n                        transaction.onabort = null;\n                        const cacheMeta = this._metaCache.get(key);\n                        if (cacheMeta) {\n                            this._metaCache.delete(key);\n                            this._nowSize -= cacheMeta.size;\n                        }\n                        this._metaCache.set(key, meta);\n                        this._nowSize += meta.size;\n                        if (this._maxCount < this._metaCache.size || this._maxSize < this._nowSize) {\n                            this._cleanup();\n                        }\n                        resolve();\n                    };\n                    transaction.onerror = () => {\n                        transaction.oncomplete = null;\n                        transaction.onerror = null;\n                        transaction.onabort = null;\n                        reject(IDBCache.ERROR.REQUEST_FAILED);\n                    };\n                    transaction.onabort = () => {\n                        transaction.oncomplete = null;\n                        transaction.onerror = null;\n                        transaction.onabort = null;\n                        reject(IDBCache.ERROR.REQUEST_FAILED);\n                    };\n                    try {\n                        dataStore.put(data, key);\n                        metaStore.put(meta, key);\n                    }\n                    catch (e) {\n                        console.error(e);\n                        transaction.abort();\n                    }\n                }, (errorCode) => {\n                    // Open error\n                    reject(errorCode);\n                });\n            });\n        });\n    }\n    /**\n     * Get value from IndexedDB\n     * @param key\n     */\n    get(key) {\n        return new Promise((resolve, reject) => {\n            this._open((db) => {\n                const transaction = db.transaction(STORE_NAME.DATA, 'readonly');\n                const dataStore = transaction.objectStore(STORE_NAME.DATA);\n                const request = dataStore.get(key);\n                request.onsuccess = () => {\n                    request.onsuccess = null;\n                    request.onerror = null;\n                    const nowSeconds = Math.floor(Date.now() / 1000);\n                    const cacheMeta = this._metaCache.get(key);\n                    if (request.result && cacheMeta && nowSeconds < cacheMeta.expire) {\n                        this._deserializeData(request.result, cacheMeta, (data) => {\n                            resolve(data);\n                        });\n                    }\n                    else {\n                        // Can not find or expired\n                        reject(IDBCache.ERROR.GET_EMPTY);\n                    }\n                };\n                request.onerror = () => {\n                    request.onsuccess = null;\n                    request.onerror = null;\n                    reject(IDBCache.ERROR.REQUEST_FAILED);\n                };\n            }, (errorCode) => {\n                // Open error\n                reject(errorCode);\n            });\n        });\n    }\n    /**\n     * Delete one value of IndexedDB\n     * @param key\n     */\n    delete(key) {\n        return new Promise((resolve, reject) => {\n            this._open((db) => {\n                const transaction = db.transaction([STORE_NAME.META, STORE_NAME.DATA], 'readwrite');\n                const metaStore = transaction.objectStore(STORE_NAME.META);\n                const dataStore = transaction.objectStore(STORE_NAME.DATA);\n                transaction.oncomplete = () => {\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    const cacheMeta = this._metaCache.get(key);\n                    if (cacheMeta) {\n                        this._metaCache.delete(key);\n                        this._nowSize -= cacheMeta.size;\n                    }\n                    resolve();\n                };\n                transaction.onerror = () => {\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    reject(IDBCache.ERROR.REQUEST_FAILED);\n                };\n                transaction.onabort = () => {\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    reject(IDBCache.ERROR.REQUEST_FAILED);\n                };\n                try {\n                    dataStore.delete(key);\n                    metaStore.delete(key);\n                }\n                catch (e) {\n                    console.error(e);\n                    transaction.abort();\n                }\n            }, (errorCode) => {\n                // Open error\n                reject(errorCode);\n            });\n        });\n    }\n    _initialize() {\n        this._open((db) => {\n            const transaction = db.transaction(STORE_NAME.META, 'readonly');\n            const metaStore = transaction.objectStore(STORE_NAME.META);\n            this._metaCache.clear();\n            this._nowSize = 0;\n            let canGetAll = false;\n            if (metaStore.getAllKeys && metaStore.getAll) {\n                canGetAll = true;\n            }\n            else {\n                console.warn('This device does not support getAll');\n            }\n            let allKeys;\n            let allValues;\n            transaction.oncomplete = () => {\n                transaction.oncomplete = null;\n                transaction.onerror = null;\n                if (canGetAll) {\n                    for (var i = 0; i < allKeys.length; i++) {\n                        const key = allKeys[i];\n                        const val = allValues[i];\n                        this._metaCache.set(key, val);\n                        this._nowSize += val.size;\n                    }\n                }\n                // Sort in ascending order of expire\n                const sortArray = [];\n                const itelator = this._metaCache.entries();\n                let iteratorResult = itelator.next();\n                while (!iteratorResult.done) {\n                    sortArray.push(iteratorResult.value);\n                    iteratorResult = itelator.next();\n                }\n                sortArray.sort(function (a, b) {\n                    if (a[1].expire < b[1].expire)\n                        return -1;\n                    if (a[1].expire > b[1].expire)\n                        return 1;\n                    return 0;\n                });\n                this._metaCache = new Map(sortArray);\n                this._cleanup();\n            };\n            transaction.onerror = () => {\n                transaction.oncomplete = null;\n                transaction.onerror = null;\n            };\n            // referencing argument's event.target of openCursor() causes memory leak on Safari\n            if (canGetAll) {\n                metaStore.getAllKeys().onsuccess = (event) => {\n                    allKeys = event.target.result;\n                };\n                metaStore.getAll().onsuccess = (event) => {\n                    allValues = event.target.result;\n                };\n            }\n            else {\n                metaStore.openCursor().onsuccess = (event) => {\n                    const cursor = event.target.result;\n                    if (cursor) {\n                        this._metaCache.set(cursor.key, cursor.value);\n                        this._nowSize += cursor.value.size;\n                        cursor.continue();\n                    }\n                    ;\n                };\n            }\n            ;\n        }, () => {\n            // Ignore open error\n        });\n    }\n    _cleanup() {\n        this._open((db) => {\n            const removeKeys = new Set();\n            const nowSeconds = Math.floor(Date.now() / 1000);\n            let tmpNowCount = this._metaCache.size;\n            this._metaCache.forEach((meta, key) => {\n                if (meta.expire < nowSeconds || this._maxSize < this._nowSize || this._maxCount < tmpNowCount) {\n                    removeKeys.add(key);\n                    this._nowSize -= meta.size;\n                    tmpNowCount--;\n                }\n            });\n            if (0 < removeKeys.size) {\n                const transaction = db.transaction([STORE_NAME.META, STORE_NAME.DATA], 'readwrite');\n                const metaStore = transaction.objectStore(STORE_NAME.META);\n                const dataStore = transaction.objectStore(STORE_NAME.DATA);\n                transaction.oncomplete = () => {\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    removeKeys.forEach((key) => {\n                        if (this._metaCache.has(key))\n                            this._metaCache.delete(key);\n                    });\n                };\n                transaction.onerror = () => {\n                    console.error('IndexedDB cleanup failed');\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    this._nowSize = 0;\n                    this._metaCache.forEach((meta) => {\n                        this._nowSize += meta.size;\n                    });\n                };\n                transaction.onabort = () => {\n                    console.error('IndexedDB cleanup failed');\n                    transaction.oncomplete = null;\n                    transaction.onerror = null;\n                    transaction.onabort = null;\n                    this._nowSize = 0;\n                    this._metaCache.forEach((meta) => {\n                        this._nowSize += meta.size;\n                    });\n                };\n                removeKeys.forEach((key) => {\n                    try {\n                        dataStore.delete(key);\n                        metaStore.delete(key);\n                    }\n                    catch (e) {\n                        transaction.abort();\n                    }\n                });\n            }\n        }, () => {\n            // Ignore open error\n        });\n    }\n    _createObjectStore(db, oldVersion) {\n        if (oldVersion < 1) {\n            // Structure of first edition\n            db.createObjectStore(STORE_NAME.META);\n            db.createObjectStore(STORE_NAME.DATA);\n        }\n    }\n    _open(success, error) {\n        if (!this._indexedDB) {\n            error(IDBCache.ERROR.NOT_SUPPORT_IDB);\n            return;\n        }\n        let request = this._indexedDB.open(this._dbName, VERSION);\n        request.onupgradeneeded = (event) => {\n            request.onupgradeneeded = null;\n            this._createObjectStore(request.result, event.oldVersion);\n        };\n        request.onblocked = () => {\n            request.onblocked = null;\n            alert('Please close other tabs');\n        };\n        request.onsuccess = () => {\n            request.onupgradeneeded = null;\n            request.onblocked = null;\n            request.onsuccess = null;\n            request.onerror = null;\n            try {\n                success(request.result);\n            }\n            catch (e) {\n                console.error(e);\n                error(IDBCache.ERROR.UNKNOWN);\n            }\n        };\n        request.onerror = () => {\n            console.error('IndexedDB open failed');\n            request.onupgradeneeded = null;\n            request.onblocked = null;\n            request.onsuccess = null;\n            request.onerror = null;\n            error(IDBCache.ERROR.CANNOT_OPEN);\n        };\n    }\n    _serializeData(data, cb) {\n        const meta = {\n            type: 0,\n            size: 0,\n        };\n        if (typeof data === 'string') {\n            meta.type = DATA_TYPE.STRING;\n            meta.size = data.length;\n        }\n        else if (data instanceof ArrayBuffer) {\n            meta.type = DATA_TYPE.ARRAYBUFFER;\n            meta.size = data.byteLength;\n        }\n        else if (data instanceof Blob) {\n            meta.type = DATA_TYPE.BLOB;\n            meta.size = data.size;\n        }\n        else {\n            console.warn('Is not supported type of value');\n        }\n        // IndexedDB on iOS does not support blob\n        if (isIOS && meta.type === DATA_TYPE.BLOB) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                reader.onload = null;\n                meta.size = reader.result.byteLength;\n                meta.mime = data.type;\n                cb(reader.result, meta);\n            };\n            reader.onerror = () => {\n                reader.onerror = null;\n                meta.size = 0;\n                cb(null, meta);\n            };\n            reader.readAsArrayBuffer(data);\n        }\n        else {\n            cb(data, meta);\n        }\n    }\n    _deserializeData(data, meta, cb) {\n        let type = 0;\n        if (typeof data === 'string') {\n            type = DATA_TYPE.STRING;\n        }\n        else if (data instanceof ArrayBuffer) {\n            type = DATA_TYPE.ARRAYBUFFER;\n        }\n        else if (data instanceof Blob) {\n            type = DATA_TYPE.BLOB;\n        }\n        if (meta && meta.type === DATA_TYPE.BLOB && type === DATA_TYPE.ARRAYBUFFER) {\n            const blob = new Blob([data], { type: meta.mime });\n            cb(blob);\n        }\n        else {\n            cb(data);\n        }\n    }\n}\nIDBCache.ERROR = {\n    INVALID_ARGUMENT: 1,\n    CANNOT_OPEN: 2,\n    REQUEST_FAILED: 3,\n    GET_EMPTY: 4,\n    NOT_SUPPORT_IDB: 5,\n    UNKNOWN: 6,\n};\n"],"names":["VERSION","STORE_NAME","META","DATA","DATA_TYPE","STRING","ARRAYBUFFER","BLOB","isIOS","test","window","navigator","userAgent","IDBCache","dbName","strageLimit","_maxSize","_maxCount","_defaultAge","_nowSize","_metaCache","Map","_indexedDB","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","_dbName","console","error","size","count","defaultAge","_initialize","key","value","maxAge","Promise","resolve","reject","_serializeData","data","meta","ERROR","INVALID_ARGUMENT","_open","db","transaction","metaStore","objectStore","dataStore","nowSeconds","Math","floor","Date","now","expire","oncomplete","onerror","onabort","cacheMeta","get","delete","set","_cleanup","REQUEST_FAILED","put","e","abort","errorCode","request","onsuccess","result","_deserializeData","GET_EMPTY","clear","canGetAll","getAllKeys","getAll","warn","allKeys","allValues","i","length","val","sortArray","itelator","entries","iteratorResult","next","done","push","sort","a","b","event","target","openCursor","cursor","continue","removeKeys","Set","tmpNowCount","forEach","add","has","oldVersion","createObjectStore","success","NOT_SUPPORT_IDB","open","onupgradeneeded","_createObjectStore","onblocked","alert","UNKNOWN","CANNOT_OPEN","cb","type","ArrayBuffer","byteLength","Blob","reader","FileReader","onload","mime","readAsArrayBuffer","blob"],"mappings":"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"}